package main

import (
	"github.com/julienschmidt/httprouter"
	"net/http"
	"log"
	"fmt"
	"encoding/json"
	//"io"
)

func Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	fmt.Fprint(w, "Welcome!\n")
}

type Book struct {
	ISDN   string `json:"isdn"`
	Title  string `json:"title"`
	Author string `json:"author"`
	Pages  int    `json:"pages"`
}

type JsonResponse struct {
	Meta interface{} `json:"meta"`
	Data interface{} `json:"data"`
}

type JsonErrResponse struct {
	Error *ApiError `json:"error"`
}

type ApiError struct {
	Status int `json:"status"`
	Message string `json:"message"`
}

var bookstore = make(map[string]*Book)


func BookIndex(w http.ResponseWriter, r *http.Request, _ httprouter.Params){
	books := [] *Book{}
	for _, book := range bookstore {
		books = append(books, book)
	}

	response := &JsonResponse{Data: books}
	//设置响应头返回数据类型为json格式
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	//设置http正确响应码
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(response); err != nil {
		panic(err)
	}
}

func BookShow(w http.ResponseWriter, r *http.Request, params httprouter.Params) {
	isdn := params.ByName("isdn")
	book, ok := bookstore[isdn]

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if !ok {
		w.WriteHeader(http.StatusNotFound)
		response := &JsonErrResponse{Error : &ApiError{Status: 404, Message:"Record Not Found"}}
		if err := json.NewEncoder(w).Encode(response); err != nil {
			panic(err)
		}
	}

	response := JsonResponse{Data: book}
	w.WriteHeader(http.StatusOK)
	//if err := json.NewEncoder(w).Encode(response); err != nil {
	//	panic(err)
	//}

	if resp, err := json.Marshal(response); err != nil {
		panic(err)
	}else {
		fmt.Fprint(w, string(resp))
		//io.WriteString(w, resp)
	}

}


func main(){
	router := httprouter.New()
	router.GET("/", Index)
	router.GET("/index", BookIndex)
	router.GET("/book/:isdn", BookShow)

	bookstore["123"] = &Book{
		ISDN:   "123",
		Title:  "Silence of the Lambs",
		Author: "Thomas Harris",
		Pages:  367,
	}

	bookstore["124"] = &Book{
		ISDN:   "124",
		Title:  "To Kill a Mocking Bird",
		Author: "Harper Lee",
		Pages:  320,
	}


	log.Fatal(http.ListenAndServe(":8080", router))
}
